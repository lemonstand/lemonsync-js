#!/usr/bin/env node
var AWS      = require('aws-sdk'),
    s3,
    request  = require('request'),
    fs       = require('fs'),
    readline = require('readline'),
    mkdirp   = require('mkdirp'),
    pathModule = require('path'),
    ignore = require("ignore"),
    rimraf = require("rimraf");

/** Some CLI defaults */
var defaults = {
    scanTimeout: 30,
    s3Timeout: 300000, /* 5 minutes */
    maximumFileCount: 10000,
    version: '1.0.11'
};

defaults.s3Timeout = 50000; // < 1 minute

/**
 * S3 security variables
 */
var accessKeyId,
    secretAccessKey,
    sessionToken,
    bucket,
    prefix,
    store;

var watchDir = process.cwd(),
    theme = watchDir.match(/([^\/\\]*)(\/\\)*$/)[1],
    storeName,
    apiKey,
    localConfig = 'lemonsync.json',
    ign,
    verbose = false;


processGlobalCommandLine();
loadPrivateHelpers();
readConfig();

function readConfig() {
    if (fs.existsSync(localConfig)) {
        var config = fs.readFileSync(localConfig, 'utf8');
        var json = JSON.parse(config);
        if (json.theme_code) {
            theme = json.theme_code;
        } else {
            console.log('Field "theme_code" not found in lemonsync.json, please add this field.');
            return;
        }
        if (json.store) {
            storeName = json.store;
        } else {
            console.log('Field "store" not found in lemonsync.json, please add this field.');
            return;
        }
        /**
         * Strips trailing slash
         */
        storeName = storeName.replace(/\/$/, "");
        if (json.api_token) {
            apiKey = json.api_token;
        } else {
            console.log('Field "api_token" not found in lemonsync.json, please add this field.');
            return;
        }
        var ignorePatterns = json.ignore_patterns;
        ign = ignore().add(ignorePatterns);
        getIdentity(
            apiKey,
            getS3ListOfObjects // callback on completion
        );
    } else {
        console.log('üçã  Please create a lemonsync.json file, see our wiki for more information: https://github.com/tomcornall/lemonsync-js üçã');
    }
}

function emptyLocalFolder(path) {
    console.details('DELETE', 'Clearing local folder before syncing down');
    fs.readdirSync(path).forEach(function(file, index) {
        if (file == 'lemonsync.json') {
            console.details('DELETE', 'Skipping LemonSync configuration');
            return;
        }
        var curPath = path + pathModule.sep + file;
        if(fs.lstatSync(curPath).isDirectory()) { // recurse
            rimraf.sync(curPath);
        } else { // delete file
            fs.unlinkSync(curPath);
        }
    });
}

/**
 * @param s3Files - array of key/body objects that make up a theme
 */
function compareS3FilesWithLocal(s3Files, prefix) {
    var matchingFiles = {};
    var changedLocalFiles = {};
    var changedRemoteFiles = {};
    var newLocalFiles = {};
    var newS3Files = {};
    var count = 0;
    var localPathMatchCount = 0;

    var localFilePaths = listFullFilePaths(watchDir);

    if (process.argv.includes('--reset=local')) {
        emptyLocalFolder(watchDir);
        localFilePaths = listFullFilePaths(watchDir);
    }

    /**
     * Ignore file patterns
     */
    localFilePaths = ign.filter(localFilePaths);

    localFilePaths.forEach( function( localFilePath, index ) {

        localFileBody = fs.readFileSync(localFilePath, 'utf8');
        count++;

        shortLocalPath = localFilePath.replace(watchDir, theme);

        if (shortLocalPath in s3Files) {
            localPathMatchCount++;
            // Local file exists in s3, compare bodies:
            if (s3Files[shortLocalPath] !== localFileBody) {
                // Files are different, store in array of changed files.
                changedLocalFiles[prefix + shortLocalPath] = localFileBody;
                changedRemoteFiles[localFilePath] = s3Files[shortLocalPath];
            } else {
                matchingFiles[localFilePath] = localFileBody;
            }
        } else {
            if (localFileBody) {
                // New local file found, store in array of new files.
                newLocalFiles[prefix + shortLocalPath] = localFileBody;
            }
        }

        if (localFilePaths.length == count) {
            for (var key in s3Files) {
                if (s3Files.hasOwnProperty(key)) {
                    localKey = key.replace(theme, watchDir);
                    if (!(localKey in changedRemoteFiles) && !(localKey in matchingFiles)) {
                        // New remote file found, store in array of new files.
                        newS3Files[localKey] = s3Files[key];
                    }
                }
            }

            numberChanged = Object.keys(changedLocalFiles).length;
            numberNewLocal = Object.keys(newLocalFiles).length;
            numberNewS3 = Object.keys(newS3Files).length;

                /**
                 * Interface for reading typed user input
                 */
                readInput = readline.createInterface({
                    input: process.stdin,
                    output: process.stdout,
                    prompt: 'üçã  >'
                });
                // combine objects
                Object.assign(changedLocalFiles, newLocalFiles);
                Object.assign(changedRemoteFiles, newS3Files);

                if (process.argv.includes('--reset=local')) {
                    overwriteLocalWithStore(changedRemoteFiles);
                    return;
                }

                if (process.argv.includes('--reset=remote')) {
                    uploadLocalToStore(changedLocalFiles);
                    return;
                }

                if (numberNewLocal > 0) {
                    console.log(numberNewLocal + ' new local file(s) were found.');
                }

                if (numberNewS3 > 0) {
                    console.log(numberNewS3 + ' new store file(s) were found.');
                }

                if (localPathMatchCount == 0) {
                    console.log('No matching file names were found.');
                }

                if (numberChanged > 0) {
                    console.log(numberChanged + ' file(s) have changed.');
                }

                if (numberChanged == 0 && numberNewLocal == 0 && numberNewS3 == 0) {
                    watchForChanges();
                    return;
                }

                console.log('\r\nDo you want to overwrite your local or remote files?\r\n');

                console.log('Type "local" to overwrite your local theme: ' + watchDir);
                console.log('Type "remote" to overwrite your store\'s theme: ' + theme + '\r\n');

                readInput.prompt();
                readInput.on('line', function(answer) {
                    if (answer == 'remote' && (numberNewLocal > 0 || numberChanged > 0)) {
                        uploadLocalToStore(changedLocalFiles);
                    } else if (answer == 'local' && (numberNewS3 > 0 || numberChanged > 0)) {
                        overwriteLocalWithStore(changedRemoteFiles);
                    } else if (answer == 'lemons') {
                        console.log('\r\nüçã üçã üçã üçã üçã üçã üçã  Yummy! üçã üçã üçã üçã üçã üçã üçã\r\n');
                    } else if (answer == 'john lemon') {
                        console.log('‚ñà‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñú‚ñõ‚ñÄ‚ñÄ‚ñû‚ñú‚ñú‚ñú‚ñà‚ñõ‚ñõ‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñú‚ñà‚ñà‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñõ‚ñõ‚ñÄ‚ñõ‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñü‚ñú‚ñô‚ñõ‚ñà‚ñà‚ñõ‚ñå‚ñå‚ñú‚ñê‚ñê‚ñü‚ñú‚ñõ‚ñå‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñõ‚ñà‚ñû‚ñô‚ñò‚ñô‚ñå‚ñõ‚ñû‚ñÑ‚ñà‚ñå‚ñå‚ñõ‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñú‚ñà‚ñô‚ñà‚ñú‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñü‚ñà‚ñü‚ñà‚ñà‚ñà‚ñü‚ñô‚ñÄ‚ñû‚ññ‚ñô‚ñú‚ñú‚ñü‚ñü‚ñà‚ñà‚ñõ‚ñà‚ñõ‚ñô‚ñà‚ñü‚ñõ‚ñú‚ñù‚ññ‚ñù‚ñå‚ñô‚ñú‚ñê‚ñö‚ññ‚ñô‚ñõ‚ñû‚ñû‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà‚ñü‚ñô‚ñà\r\n‚ñà‚ñü‚ñü‚ñô‚ñà‚ñà‚ñô‚ñô‚ñå‚ñå‚ñö‚ñô‚ñú‚ñú‚ñõ‚ñü‚ñû‚ñü‚ñô‚ñõ‚ñö‚ñö‚ñà‚ñü‚ñö‚ñö‚ñÄ  ‚ñù‚ñû‚ñü‚ñù‚ñû‚ññ‚ñù‚ñô‚ñå‚ñú‚ñü‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñü‚ñô‚ñô‚ñà‚ñô‚ñà‚ñõ‚ñà‚ñü‚ñå‚ñô‚ñú‚ñõ‚ñå‚ñå‚ñõ‚ñå‚ñô‚ñü‚ñú‚ñê‚ñê ‚ñò   ‚ññ‚ñò‚ñõ ‚ñö‚ñù‚ññ‚ñò ‚ñõ‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà‚ñô‚ñà\r\n‚ñà‚ñü‚ñü‚ñô‚ñà‚ñà‚ñà‚ñõ‚ñà‚ñô‚ñú‚ñû‚ñà‚ñú‚ñú‚ñê‚ñê‚ñê‚ñô‚ñú‚ñù‚ññ‚ññ‚ñö‚ñò‚ñù   ‚ñö ‚ñù ‚ñö ‚ñò‚ñò‚ñê‚ñê‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñú‚ñà‚ñà‚ñà\r\n‚ñà‚ñü‚ñô‚ñú‚ñà‚ñõ‚ñô‚ñà‚ñô‚ñõ‚ñà‚ñú‚ñà‚ñú‚ñû‚ñû‚ñû‚ñô‚ñå‚ñô‚ñö ‚ñó‚ñò‚ñò  ‚ññ‚ñö‚ñò ‚ñó‚ñù‚ñó‚ñù ‚ñö‚ñù‚ñû‚ñú‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñü‚ñà\r\n‚ñà‚ñü‚ñú‚ñà‚ñõ‚ñà‚ñà‚ñú‚ñü‚ñà‚ñà‚ñê‚ñà‚ñô‚ñú‚ñû‚ñå‚ñå‚ñå‚ñú  ‚ññ ‚ñù ‚ñù‚ñó‚ñõ    ‚ñò ‚ñò‚ñó‚ñó‚ñù‚ññ‚ñõ‚ñà‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñü‚ñà‚ñà‚ñà‚ñú‚ñà‚ñà\r\n‚ñà‚ñü‚ñà‚ñà‚ñà‚ñà‚ñü‚ñà‚ñà‚ñú‚ñû‚ñô‚ñà‚ñü‚ñà‚ñû‚ñå‚ñå‚ñû‚ñê‚ñå‚ññ‚ñó ‚ñù ‚ñó‚ñê‚ññ ‚ñó‚ñù  ‚ñó‚ñù  ‚ññ‚ñû‚ñê‚ñê‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñõ‚ñà‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñõ‚ñà\r\n‚ñà‚ñü‚ñô‚ñà‚ñà‚ñà‚ñà‚ñú‚ñü‚ñõ‚ñà‚ñô‚ñà‚ñà‚ñô‚ñõ‚ñå‚ñå‚ññ‚ññ‚ñå ‚ñó  ‚ñù  ‚ñò‚ññ‚ññ     ‚ññ‚ñò‚ññ‚ñù‚ñù‚ñû‚ñû‚ñõ‚ñà‚ñà‚ñà‚ñõ‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà‚ñà\r\n‚ñà‚ñô‚ñà‚ñà‚ñà‚ñü‚ñú‚ñõ‚ñà‚ñà‚ñà‚ñü‚ñê‚ñú‚ñô‚ñà‚ñö‚ñò‚ñó  ‚ñò       ‚ñù   ‚ññ‚ñò‚ñó ‚ññ‚ñû‚ñê‚ñù‚ñó‚ñö‚ñú‚ñö‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñô‚ñõ‚ñà‚ñú‚ñü‚ñõ‚ñà‚ñà‚ñü‚ñà‚ñõ‚ñô‚ñú‚ñú‚ñû‚ñà‚ñö‚ñö‚ññ‚ñû‚ñÑ‚ññ‚ñö‚ñó ‚ññ ‚ñó ‚ññ ‚ñó‚ñó‚ñó‚ñû‚ñÑ‚ñô‚ñà‚ñü‚ñô‚ñà‚ñô‚ñô‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà‚ñà\r\n‚ñà‚ñõ‚ñõ‚ñô‚ñõ‚ñà‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñõ‚ñú‚ñÄ‚ñû‚ñú‚ñõ‚ñõ‚ñû‚ñò‚ñò‚ñÄ‚ñú‚ñü‚ñô‚ñö‚ñå‚ññ ‚ññ‚ñù‚ñó‚ñö‚ñà‚ñü‚ñà‚ñà‚ñõ‚ñÄ‚ñÄ‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñú‚ñü‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñõ‚ñà‚ñú‚ñà‚ñú‚ñà‚ñü‚ñà‚ñà‚ñà‚ñà‚ñõ‚ññ‚ñö‚ñù‚ñû‚ññ‚ññ‚ñù‚ñù‚ñà‚ñà‚ñà‚ñü‚ñü‚ñõ‚ñô‚ñù   ‚ññ‚ñà‚ñú‚ñà‚ñö‚ñÑ‚ñü‚ñà‚ñà‚ñú‚ñô‚ñô‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñü‚ñà\r\n‚ñà‚ñõ‚ñà‚ñü‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ññ‚ñó‚ñù‚ññ‚ññ‚ññ‚ñÑ‚ñÑ‚ñÑ‚ñà‚ñü‚ñõ‚ñô‚ñú‚ñÑ ‚ññ‚ñò‚ñö‚ñö‚ñà‚ñà‚ñö‚ñà‚ñõ‚ñô‚ñÑ‚ñü‚ñô‚ñà‚ñü‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñú‚ñõ‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñõ‚ñÄ‚ñô‚ñÑ‚ñó‚ñê‚ñÄ‚ñÄ‚ñú‚ñà‚ñú‚ñö‚ñÄ‚ñÄ ‚ñö    ‚ñù‚ñà‚ñô‚ñà‚ñú‚ñú‚ñÄ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñú‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñõ‚ñô‚ñà‚ñô‚ñà\r\n‚ñà‚ñú‚ñõ‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà   ‚ñê   ‚ñò‚ñò ‚ñù ‚ñû ‚ñù‚ñê    ‚ñò‚ñú‚ñü‚ñü‚ñå‚ñå‚ñû‚ññ‚ñû‚ñü‚ñü‚ñú‚ñü‚ñû‚ñõ‚ñô‚ñà‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñú‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñú‚ñõ‚ñà‚ñü‚ñà‚ñô‚ñô‚ñà‚ñô‚ñõ‚ñû   ‚ñó    ‚ññ‚ññ‚ñò ‚ñó‚ñó‚ñò     ‚ñú‚ñü‚ñû‚ñú‚ñê‚ñó‚ñû‚ñû‚ñÑ‚ñô‚ñú‚ñê‚ñê‚ñê‚ñü‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñõ‚ñà\r\n‚ñà‚ñõ‚ñà‚ñú‚ñô‚ñô‚ñô‚ñà‚ñà‚ñü‚ñú‚ññ    ‚ñò‚ññ      ‚ññ‚ññ      ‚ñô‚ñô‚ñú‚ñü‚ñù‚ñû‚ñù‚ñû‚ñû‚ññ‚ñò‚ñÑ‚ñö‚ñú‚ñü‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñú‚ñõ‚ñà‚ñû‚ñà‚ñà‚ñà‚ñô‚ñõ‚ñô‚ñà      ‚ñò‚ñò  ‚ñò‚ñö‚ñù       ‚ñå‚ñà‚ñö‚ñö‚ñú‚ñû‚ñÑ‚ññ‚ñÑ‚ñê‚ñö‚ñô‚ñà‚ñà‚ñà‚ñú‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñú‚ñà\r\n‚ñà‚ñà‚ñà‚ñô‚ñà‚ñô‚ñà‚ñü‚ñà‚ñÄ‚ñô‚ñú‚ññ‚ñó      ‚ñù‚ñù‚ñù        ‚ñó‚ñê‚ñà‚ñà‚ñà‚ñê‚ñê‚ñê‚ñû‚ñô‚ñõ‚ñà‚ñü‚ñà‚ñô‚ñà‚ñà‚ñà‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñü‚ñô‚ñà‚ñô‚ñà‚ñú‚ñà‚ñú‚ñõ‚ñõ‚ñõ‚ñû  ‚ññ               ‚ññ‚ñà‚ñà‚ñú‚ñà‚ñå‚ñå‚ññ‚ñö‚ñö‚ñú‚ñú‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñü‚ñà‚ñà\r\n‚ñà‚ñõ‚ñà‚ñô‚ñà‚ñà‚ñà‚ñü‚ñà‚ñà‚ñü‚ñú‚ñô‚ñù  ‚ññ       ‚ñò     ‚ñó‚ñù‚ñü‚ñõ‚ñô‚ñà‚ñõ‚ñû‚ñû‚ñû‚ñû‚ñü‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñú‚ñü‚ñà‚ñà‚ñô‚ñà\r\n‚ñà‚ñà‚ñõ‚ñà‚ñô‚ñà‚ñü‚ñõ‚ñô‚ñà‚ñú‚ñõ‚ñô‚ñù ‚ñò ‚ñù       ‚ñù‚ñú‚ñô‚ññ‚ñû‚ñÑ‚ñü‚ñà‚ñà‚ñà‚ñà‚ñú‚ñû‚ñû‚ñê‚ñê‚ñô‚ñà‚ñà‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà‚ñà\r\n‚ñà‚ñü‚ñà‚ñú‚ñü‚ñà‚ñô‚ñà‚ñõ‚ñà‚ñö‚ñõ‚ñà ‚ñö‚ñó‚ñù           ‚ñò‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñê‚ñê‚ñê‚ñö‚ñõ‚ñà‚ñà‚ñú‚ñà‚ñà‚ñà‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñú‚ñü‚ñà‚ñà‚ñü‚ñú‚ñô‚ñà‚ñà‚ñú‚ñà‚ñú‚ñö ‚ññ‚ñó‚ñù           ‚ñû‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñü‚ñô‚ñô‚ñú‚ñö‚ñà‚ñà‚ñú‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñõ‚ñà‚ñô‚ñà‚ñõ‚ñà\r\n‚ñà‚ñà‚ñà‚ñú‚ñü‚ñà‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñü‚ñà‚ñô‚ñó   ‚ññ‚ñù ‚ñó ‚ññ‚ññ‚ñó‚ñó ‚ñù‚ñù‚ñù‚ñû‚ñü‚ñà‚ñú‚ñü‚ñà‚ñô‚ñõ‚ñõ‚ñà‚ñú‚ñü‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñü‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñô‚ñà‚ñà‚ñà‚ñô‚ñà‚ñà‚ñà‚ñü‚ñõ‚ñà‚ñú‚ñü‚ñÑ‚ñù ‚ñò    ‚ñå‚ñô‚ñô‚ñô‚ñÑ‚ñü‚ñü‚ñÑ‚ñÑ‚ñü‚ñü‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñü‚ñà‚ñà‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñõ‚ñô‚ñà‚ñà‚ñà\r\n‚ñà‚ñú‚ñô‚ñà‚ñü‚ñõ‚ñô‚ñà‚ñü‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñå‚ññ‚ñó ‚ññ ‚ñò‚ñò‚ñò  ‚ñò‚ñò‚ñò‚ñÄ‚ñÄ‚ñÄ‚ñú‚ñú‚ñõ‚ñà‚ñõ‚ñà‚ñü‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñú‚ñà‚ñà‚ñà‚ñú‚ñà‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà\r\n‚ñà‚ñà‚ñú‚ñõ‚ñô‚ñà‚ñà‚ñõ‚ñà‚ñü‚ñô‚ñà‚ñú‚ñà‚ñà‚ñà‚ññ‚ññ‚ññ‚ñó‚ñù ‚ñò     ‚ñö‚ñö‚ñü‚ñü‚ñõ‚ñà‚ñú‚ñõ‚ñà‚ñô‚ñô‚ñà‚ñô‚ñà‚ñà‚ñõ‚ñà‚ñü‚ñà‚ñà‚ñà‚ñü‚ñà‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñà‚ñú‚ñà‚ñà\r\n‚ñà‚ñü‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà‚ñà‚ñà‚ñú‚ñü‚ñà‚ñô‚ñà‚ñô‚ñú‚ñÑ‚ñó  ‚ñò   ‚ñó‚ñù‚ñù‚ñû‚ñå‚ñõ‚ñô‚ñà‚ñú‚ñõ‚ñà‚ñô‚ñõ‚ñà‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñà‚ñú‚ñü‚ñà‚ñü‚ñà‚ñú‚ñà‚ñü‚ñà‚ñà‚ñú‚ñà‚ñú‚ñÄ‚ñû‚ñê‚ñê‚ñê‚ñó ‚ññ       ‚ñù‚ñù‚ñù‚ñù‚ñû‚ñö‚ñö‚ñà‚ñõ‚ñà‚ñà‚ñà‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñô‚ñà‚ñà‚ñú‚ñà‚ñà‚ñà‚ñú‚ñà\r\n‚ñà‚ñü‚ñà‚ñà‚ñú‚ñà‚ñü‚ñà‚ñà‚ñú‚ñõ‚ñõ‚ñÄ   ‚ñû‚ñê‚ñê‚ñê‚ñû‚ññ ‚ññ         ‚ñò‚ñù‚ñû‚ñô‚ñà‚ñà‚ñà‚ñà‚ñú‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñü‚ñà‚ñà\r\n‚ñà‚ñà‚ñú‚ñü‚ñà‚ñõ‚ñà‚ñú‚ñû‚ñõ‚ñù     ‚ññ‚ñò‚ññ‚ñö‚ñê‚ñú‚ñö‚ñó‚ñó ‚ññ‚ñó ‚ññ‚ñó‚ñò‚ñû‚ñê‚ñû‚ñü‚ñà‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñü‚ñà‚ñà‚ñú‚ñõ‚ñÄ‚ñö‚ñö‚ñò       ‚ñò‚ñù‚ññ‚ñö‚ñê‚ñö‚ñô‚ñå‚ñô‚ñê‚ñó‚ñö‚ñû‚ñÑ‚ñô‚ñú‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñú‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà\r\n‚ñà‚ñà‚ñà‚ñù‚ñö‚ñÑ‚ñà‚ñü‚ñü‚ñå      ‚ñù‚ñü‚ñÑ‚ñÑ‚ñô‚ñÑ‚ñô‚ñô‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñü‚ñà‚ñà‚ñà‚ñà‚ñü‚ñà‚ñà‚ñü‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà‚ñà');
                    } else if (answer == 'lemonstand') {
                        console.log('‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñà\r\n‚ñô‚ñú‚ñù ‚ñò‚ñù ‚ñò‚ñù ‚ñÄ‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñû‚ñô‚ñú‚ñü\r\n‚ñû‚ñô   ‚ñû‚ñÄ‚ñó‚ñÑ  ‚ñà‚ñû‚ñö‚ñú‚ñû‚ñå‚ñÄ‚ñù‚ñö‚ñú‚ñù‚ñô‚ñú‚ñù‚ñô‚ñú‚ñù‚ñò‚ñÄ‚ñê‚ñô‚ñÄ‚ñû‚ñô‚ñÄ‚ñû‚ñå‚ñÄ‚ñù‚ñå‚ñÄ‚ñù‚ñò‚ñú‚ñû‚ñò‚ñõ‚ñü‚ñò‚ñú‚ñû‚ñå‚ñõ‚ñù‚ñò‚ñÄ‚ñê‚ñô‚ñú\r\n‚ñú‚ñü ‚ñó‚ñÄ   ‚ñù‚ññ ‚ñô‚ñú‚ñù‚ñô‚ñú‚ñö‚ñù‚ñò‚ñõ‚ñô‚ñó‚ñù‚ñå‚ññ‚ñû‚ñå‚ñû‚ñõ‚ñü ‚ñû ‚ñû‚ñû ‚ñõ‚ññ‚ñÄ‚ñô‚ñú‚ñû ‚ñõ‚ñü ‚ñå‚ñú‚ñû‚ññ‚ññ‚ñú ‚ñú ‚ñõ‚ñü‚ññ‚ñû‚ñà\r\n‚ñô‚ñö ‚ñù‚ñò   ‚ñû  ‚ñô‚ñô‚ñù‚ñû‚ñô‚ñå‚ñê‚ñú‚ñú‚ññ‚ñê‚ññ‚ñó‚ñò‚ñê‚ññ‚ñö‚ñú‚ñû‚ñò‚ñõ‚ñó‚ñô‚ñù ‚ñõ‚ñû‚ñô ‚ñô‚ñú ‚ñà‚ñû‚ñó‚ñÑ ‚ñõ ‚ñô‚ññ‚ñò‚ñú ‚ñõ‚ñå‚ñò‚ñü‚ñú\r\n‚ñû‚ñõ  ‚ñÄ‚ñò‚ñÑ‚ñÄ   ‚ñô‚ñö‚ñÑ‚ñÑ‚ññ‚ñô‚ñÑ‚ñó‚ñÑ‚ñô‚ñû‚ñü‚ñú‚ñö‚ñü‚ñü‚ñÑ‚ñÑ‚ñó‚ñõ‚ñõ‚ñÑ‚ñû‚ñõ‚ñÑ‚ñú‚ñÑ‚ñó‚ñû‚ñû‚ñô‚ñÑ‚ñå‚ñå‚ñô‚ñö‚ñô‚ñü‚ñÑ‚ñö‚ñô‚ñÑ‚ñú‚ñÑ‚ñó‚ñÑ‚ñú‚ñû‚ñà\r\n‚ñú‚ñú‚ñÑ‚ñÑ‚ñó‚ññ‚ññ‚ññ‚ññ‚ñÑ‚ñê‚ñû‚ñõ‚ñü‚ñê‚ñû‚ñô‚ñö‚ñõ‚ñü‚ñê‚ñû‚ñô‚ñô‚ñú‚ñû‚ñÑ‚ñå‚ñô‚ñú‚ñû‚ñô‚ñô‚ñú‚ñú‚ñû‚ñô‚ñö‚ñõ‚ñü‚ñú‚ñü‚ñû‚ñü‚ñú‚ñû‚ñô‚ñö‚ñå‚ñô‚ñú‚ñû‚ñû‚ñô‚ñö‚ñõ‚ñû‚ñô‚ñú‚ñü\r\n‚ñà‚ñü‚ñü‚ñü‚ñô‚ñà‚ñü‚ñà‚ñü‚ñô‚ñà‚ñü‚ñà‚ñü‚ñô‚ñà‚ñü‚ñô‚ñà‚ñü‚ñô‚ñà‚ñü‚ñü‚ñô‚ñà‚ñü‚ñü‚ñô‚ñà‚ñü‚ñü‚ñü‚ñô‚ñô‚ñà‚ñü‚ñô‚ñà‚ñü‚ñô‚ñô‚ñà‚ñü‚ñô‚ñà‚ñü‚ñô‚ñà‚ñü‚ñô‚ñà‚ñà‚ñü‚ñô‚ñà‚ñà‚ñü‚ñô‚ñà');
                    } else {
                        watchForChanges();
                    }
                    readInput.close();
                });

        }
    });
}

function overwriteLocalWithStore(changedFiles) {
    console.log('\r\nOverwriting local theme files...\r\n');
    var count = 0;

    if (pathModule.sep == '\\') {
        for (var key in changedFiles) {
            if (changedFiles.hasOwnProperty(key)) {
                newKey = key.replace(/\//g,"\\");
                changedFiles[newKey] = changedFiles[key];
                delete changedFiles[key];
            }
        }
    }

    for (var key in changedFiles) {
        if (changedFiles.hasOwnProperty(key)) {
            try {
                var path = pathModule.dirname(key);
                mkdirp.sync(path);
                fs.writeFileSync(key, changedFiles[key]);
                console.log('- ' + key);
            } catch (err) {
                console.log('Error overwriting local file (' + key + '): ' + err.message);
            }
        }
    }

    // Watch for changes can catch these local file writes if we run it instantly
    setTimeout(watchForChanges, defaults.scanTimeout);
}

function uploadLocalToStore(changedFiles) {
    var uploadList = [];
    var cacheKeys = [];
    var totalChanges = Object.keys(changedFiles).length;
    var count = 1;

    /** S3 file completion helper */
    var onFilePut = function(err, data) {
        if (err) {
            console.details('remote', 'Update failed', err, err.headers);
        } else {
            console.details('remote', 'Update OK for', data.headers);
        }
    }

    console.log('\r\nOverwriting store\'s theme...\r\n');

    /** Queue up upload and cache list for sync with server */

    for (var key in changedFiles) {
        var cacheKey = key.replace(prefix + theme + '/', '');
        var fileSizeMB = changedFiles[key].length / 1024 / 1024;

        console.log('- ' + cacheKey.replace(prefix, ''));

        console.details('remote', 'Preparing changes for',
            cacheKey,
            '(', count, '/', totalChanges, ')',
            fileSizeMB.toFixed(2), 'MB');

        if (!changedFiles.hasOwnProperty(key)) {
            continue; // skip non-file object props
        }

        // track cache entry
        cacheKeys.push(cacheKey);

        // track upload
        var params = {
            Bucket: bucket,
            Key: key,
            Body: changedFiles[key]
        };

        var themeFileUpdater = s3.putObject(params, onFilePut)
                                    .promise();

        uploadList.push(themeFileUpdater);
        count++;
    }

    console.details('remote', 'Updating', uploadList.length, '/', totalChanges, 'files ...');

    // Upload files in a batch + tickle cache and continue watching

    Promise
        .all(uploadList)
        .then(function (dataArray) {

            console.details('remote', 'Update complete');

            /**
             * Since this is overwriting store files, we need to update the cache
             */
            touchLSCache(cacheKeys);

            watchForChanges();

        }).catch(function (err, data) {
            console.log('Error uploading to store theme: ' + err.message);
            console.details('remote', 'S3 upload failed with', err, data);
        });
}

function watchForChanges() {
    console.log('\r\nüçã  Watching for changes... üçã\r\n');

    fs.watch(watchDir, {recursive: true}, function(eventType, filename) {
        if (filename) {
            localFilePath = watchDir + '/' + filename;
            if (ign.ignores(localFilePath)) {
                return;
            }
            if (pathModule.sep == '\\') {
                filename = filename.replace(/\\/g,"/");
            }

            key = prefix + theme + '/' + filename;
            localFileBody = fs.readFileSync(localFilePath);
            // Reading local file to send to S3
            var params = {
                Bucket: bucket,
                Key: key,
                Body: localFileBody
            };

            var putObjectPromise = s3.putObject(params).promise();
            putObjectPromise.then(function(data) {
                console.log(`- ${filename} touched`);
                var cacheKeys = [filename];
                touchLSCache(cacheKeys);
            }).catch(function(err) {
                console.log(err, err.stack);
            });
        } else {
            console.log('Filename not provided');
        }
    });
}

/**
 * @param keys - example: [ "pages/about/page-about.htm" ]
 */
function touchLSCache(keys) {
    var apiHost = storeName + '/api/v2/resource/touch';

    var options = {
        url: apiHost,
        method: 'PUT',
        headers: {
            'Authorization': 'Bearer ' + apiKey,
            'Content-Type': 'application/json'
        },
        json: { 'keys': keys }
    };

    function callback(error, response, body) {
        if (!error && response.statusCode == 200) {
            if (response.statusCode == 401) {
                console.log("The API Access Token isn't valid for " + apiHost + ". Please check that your Access Token is correct and not expired.");
            }
            if (response.statusCode != 200) {
                console.log("Could not connect to LemonStand! Didn't get 200!");
                console.details('cache', 'Cache update failed with', response.statusCode, response);
            } else {
                // Cache successfully updated.
                console.details('cache', 'Cache updated');
            }
        }
    }

    console.details('cache', 'Updating cache', apiHost);
    request(options, callback);
}

/**
 * @param s3ObjectList - data returned in listObjectsV2 via http://docs.aws.amazon.com/AWSJavaScriptSDK/latest/AWS/S3.html#listObjectsV2-property
 * @param prefix - Example: "store-testetattaet-587d6a9cc922c/themes/"
 */
function getS3Objects(s3ObjectList, prefix) {
    var s3Files = {};
    var count = 0;

    if (s3ObjectList.isTruncated) {
        console.log("Too many store files! We truncated this list to our maximum sync size.");
    }

    s3ObjectList.Contents.forEach(function( s3FileObject, index) {
        var s3Path = s3FileObject.Key.replace(prefix, '');
        var params = {
            Bucket: bucket,
            Key: s3FileObject.Key
        };
        if (process.argv.includes('--reset=remote')) {
            var deleteObjectPromise = s3.deleteObject(params).promise();
            deleteObjectPromise.then(function(data) {
                count++;
                if (count === s3ObjectList.KeyCount) {
                    // Done getting s3 objects
                    compareS3FilesWithLocal(s3Files, prefix);
                }
            }).catch(function(err) {
                console.log(err, err.stack);
            });
        } else {
            if (s3FileObject.Size > 0) {
                var getObjectPromise = s3.getObject(params).promise();
                getObjectPromise.then(function(data) {
                    s3FileBody = data.Body.toString('utf-8');
                    s3Files[s3Path] = s3FileBody;
                    count++;
                    if (count === s3ObjectList.KeyCount) {
                        // Done getting s3 objects
                        compareS3FilesWithLocal(s3Files, prefix);
                    }
                }).catch(function(err) {
                    console.log(err, err.stack);
                });
            } else {
                count++;
            }
        }
    });
}

/**
 * List all files in a directory in Node.js recursively
 */
function listFullFilePaths(dir, filelist) {
    files = fs.readdirSync(dir);
    filelist = filelist || [];
    files.forEach(function(file) {
        if (fs.statSync(dir + '/' + file).isDirectory()) {
            filelist = listFullFilePaths(dir + '/' + file, filelist);
        }
        else {
            filelist.push(dir + '/' + file);
        }
    });
    return filelist;
};

/**
 * Get s3 identity data from store API /identity/s3 endpoint
 */
function getIdentity(apiKey, cb) {
    console.log('üçã  Connecting to your store... üçã\r\n');
    var apiHost = storeName + '/api/v2/identity/s3';

    var options = {
        url: apiHost,
        method: 'POST',
        headers: {
            'Authorization': 'Bearer ' + apiKey,
            'Content-Type': 'application/json'
        }
    };

    function callback(error, response, body) {
        console.details('store', 'Connected with code', response.statusCode);
        if (!error && response.statusCode == 200) {
            var body = JSON.parse(body);
            cb(body.data);
        } else {
            if (error) {
                console.log("Could not connect to your store:");
                console.log(error.message);
                console.details('store', 'Connection failed with', response, body);
            }
            if (response) {
                if (response.statusCode == 401) {
                    console.log("The API Access Token isn't valid for " + apiHost + ". Please check that your Access Token is correct and not expired.");
                } else if (response.statusCode != 200) {
                    console.log("Could not connect to the LemonStand store.");
                }
            }
        }
    }

    request(options, callback);
}

function getS3ListOfObjects(identityData) {
    accessKeyId = identityData.key;
    secretAccessKey = identityData.secret;
    sessionToken = identityData.token;
    bucket = identityData.bucket;
    store = identityData.store;
    prefix = store + '/themes/';

    console.details('store', 'Getting store file listing for', store, theme);

    AWS.config.update({
        accessKeyId: identityData.key,
        secretAccessKey: identityData.secret,
        sessionToken: identityData.token,
        region: 'us-east-1',
        httpOptions: {
            timeout: defaults.s3Timeout
        }
    });

    s3 = new AWS.S3();

    var listObjectsV2Params = {
        Bucket: identityData.bucket,
        Prefix: prefix + theme + '/',
        MaxKeys: defaults.maximumFileCount
    };

    s3.listObjectsV2(listObjectsV2Params, function(err, objects) {
        if (err) {
            console.log(err, err.stack);
        }
        else {
            if (objects.KeyCount == 0) {
                console.log('We couldn\'t find the theme "' + theme + '" in your store. To continue, please create an empty theme with the same name.');
            }
            getS3Objects(objects, prefix);
        }
    });
}

// Register private helpers

function loadPrivateHelpers() {

    // Verbose trace helper
    console.details = function(type) {
        if (verbose) {
            var args = Array.prototype.slice.call(arguments, 1);
            var details = args.join(' ');
            console.log(type.toUpperCase() + ':', details);
        }
    }
}

function processGlobalCommandLine() {
    if (process.argv.includes('--version')) {
        console.log('Version:', defaults.version);
    }

    if (process.argv.includes('--verbose')) {
        verbose = true;
        console.log('Detailed logging is ON');
    }

    if (process.argv.includes('--network-logging')) {
        request.debug = true;
        console.log('Network logging is ON');
    }
}